[{"path":"https://jmbarbone.github.io/scribe/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 scribe authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jmbarbone.github.io/scribe/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Mark Barbone. Author, copyright holder, maintainer.","code":""},{"path":"https://jmbarbone.github.io/scribe/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbone J (2023). scribe: Command Argument Parsing. R package version 0.2.0, https://jmbarbone.github.io/scribe/.","code":"@Manual{,   title = {scribe: Command Argument Parsing},   author = {Jordan Mark Barbone},   year = {2023},   note = {R package version 0.2.0},   url = {https://jmbarbone.github.io/scribe/}, }"},{"path":"https://jmbarbone.github.io/scribe/index.html","id":"scribe","dir":"","previous_headings":"","what":"Command Argument Parsing","title":"Command Argument Parsing","text":"goal scribe provide detailed argument parser Rscript. package contains dependencies outside base methods. core functions utilize ReferenceClasses hood. Install scribe CRAN : Alternatively, can install development version scribe GitHub : can enter command arguments vector test behavior. Arguments can added scribeCommandArgs class (ca). Default behavior tries parse objects additional control can taken. Control ’ll probably use scribe within small scripts can called favorite terminal. example uses function call file, added PATH ’d able call directly:","code":"library(scribe) install.packages(\"scribe\") # install.packages(\"devtools\") devtools::install_github(\"jmbarbone/scribe\") ca <- command_args(c(\"-a\", \"1\", \"-b\", \"2\")) ca$add_argument(\"-a\") ca$add_argument(\"-b\") args <- ca$parse()  str(args$a + args$b) #>  int 3 # don't convert numbers ca <- command_args(c(\"-a\", \"1\", \"-b\", \"1.0\")) ca$add_argument(\"-a\", convert = character()) ca$add_argument(\"-b\", convert = character()) ca$parse() #> $a #> [1] \"1\" #>  #> $b #> [1] \"1.0\"  # convert numbers to integers ca <- command_args(c(\"verbose\", \"1\", \"1.5\", \"1.9\")) ca$add_argument(\"verbose\", action = \"flag\") ca$add_argument(\"...\", convert = integer()) ca$parse() #> $verbose #> [1] TRUE #>  #> $... #> NULL  # use functions for more control ca <- command_args(c(\"verbose\", \"12-9-2022\", \"12-10-2022\")) ca$add_argument(\"verbose\", action = \"flag\") ca$add_argument(\"...\", convert = function(i) as.Date(i, \"%m-%d-%Y\")) ca$parse() #> $verbose #> [1] TRUE #>  #> $... #> NULL r-file -a 1 -b 9 lines <- \" #! /usr/bin/env -S Rscript --vanilla   library(scribe) ca <- scribe::command_args() ca$add_argument('-a', default = 1) ca$add_argument('-b', default = 2) args <- ca$parse()  foo <- function(a, b, ...) {   a + b }  do.call(foo, args) \"  file <- tempfile() writeLines(lines, file)  rscript <- function(x, args = character()) {   args <- c(\"--vanilla\", x, args)   res <- system2(\"Rscript\", args, stdout = TRUE)   writeLines(res) }  rscript(file) #> [1] 3 rscript(file, \"-a 0\") #> [1] 2 rscript(file, \"-a 0 -b 10\") #> [1] 10"},{"path":"https://jmbarbone.github.io/scribe/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Command Argument Parsing","text":"’ve using scribe personal scripts. short list examples (mostly jmb repo): pak: call {pak} terminal update-r-pkgs: update old R packages todos: calls mark::todos() fixmes: calls mark::fixmes()","code":""},{"path":"https://jmbarbone.github.io/scribe/index.html","id":"other-packages","dir":"","previous_headings":"","what":"Other packages","title":"Command Argument Parsing","text":"isn’t first package. contain dependencies, even different languages (e.g., python). {argparse} {optparse} {getopt} {minimist} (CRAN archived) {optigrab} {docopt}","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/command_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Command line arguments — command_args","title":"Command line arguments — command_args","text":"Make new scribeCommandArgs object","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/command_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Command line arguments — command_args","text":"","code":"command_args(   x = NULL,   include = getOption(\"scribe.include\", c(\"help\", \"version\", NA_character_)),   string = NULL )"},{"path":"https://jmbarbone.github.io/scribe/reference/command_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Command line arguments — command_args","text":"x, string Command line arguments; see base::commandArgs() default.  least one parameter NULL.  string NULL, x used, defaults commandArgs(trailingOnly = TRUE). Otherwise value x converted character.  string NULL, scan() used split value character vector. include Special default arguments included.  See $initialize() scribeCommandArgs details.","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/command_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Command line arguments — command_args","text":"scribeCommandArgs object","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/scribe/reference/command_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Command line arguments — command_args","text":"","code":"command_args() #> Initial call:   #> w Call $resolve() or $parse() to resolve arguments #> Argument [--help] : FALSE #> Argument [--version] : FALSE command_args(c(\"-a\", 1, \"-b\", 2)) #> Initial call:  -a 1 -b 2 #> w Call $resolve() or $parse() to resolve arguments #> Argument [--help] : FALSE #> Argument [--version] : FALSE command_args(string = \"-a 1 -b 2\") #> Initial call:  -a 1 -b 2 #> w Call $resolve() or $parse() to resolve arguments #> Argument [--help] : FALSE #> Argument [--version] : FALSE"},{"path":"https://jmbarbone.github.io/scribe/reference/new_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"New command argument — new_arg","title":"New command argument — new_arg","text":"Make new scribeArg object","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/new_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New command argument — new_arg","text":"","code":"new_arg(   aliases = \"\",   action = arg_actions(),   default = NULL,   convert = default_convert,   n = NA_integer_,   info = NULL,   options = list(),   stop = c(\"none\", \"hard\", \"soft\"),   execute = invisible )"},{"path":"https://jmbarbone.github.io/scribe/reference/new_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New command argument — new_arg","text":"aliases, action, convert, options, default, info, n, stop, execute See $initialize() scribeArg.","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/new_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New command argument — new_arg","text":"scribeArg object","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/scribe/reference/new_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New command argument — new_arg","text":"","code":"new_arg() #> Argument [] : <null> new_arg(\"values\", action = \"dots\") #> Argument [values] : <null> new_arg(c(\"-f\", \"--force\"), action = \"flag\") #> Argument [-f --force --no-force] : FALSE"},{"path":"https://jmbarbone.github.io/scribe/reference/scribe-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scribe: Command Argument Parsing — scribe-package","title":"scribe: Command Argument Parsing — scribe-package","text":"base dependency solution basic argument parsing use 'Rscript'.","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribe-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scribe: Command Argument Parsing — scribe-package","text":"quick overview, see vignette(\"scribe\")","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribe-package.html","id":"options","dir":"Reference","previous_headings":"","what":"options","title":"scribe: Command Argument Parsing — scribe-package","text":"scribe.flag.[TRUE] Default value scribeArg uses action \"flag\" scribe.interactive [NULL] Controls interactive() check within internal exit()","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/scribe/reference/scribe-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scribe: Command Argument Parsing — scribe-package","text":"Maintainer: Jordan Mark Barbone jmbarbone@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeArg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"scribe argument — scribeArg-class","title":"scribe argument — scribeArg-class","text":"ReferenceClass object managing arguments","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeArg-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scribe argument — scribeArg-class","text":"scribeArg class sets specifications controls command line arguments parsed.  meant used conjunction scribeCommandArgs specifically Rscript utility.  However, use can define scribeArg separately.","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeArg-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"scribe argument — scribeArg-class","text":"aliases [character] vector denote argument's name action [character] action resolving argument (see default note using another scribeArg object) default [] default value.  can another scribeArg object.  case, default value action pass scribeArg object. convert [] Passed argument value_convert() n [integer] length values info [character] Additional information argument printed options [list] named list options (see Options) positional [logical] Indicator argument positional (.e., preceded - -- command line argument) resolved [logical] object resolved value [] resolve value stop [character]\"none\", \"hard\", \"soft\" execute [function] (advanced use).  function evaluated along arg.  function can parameters, single parameter scribeArg object, accept scribeArg object first argument, scribeCommandArgs object second.  objects passed position","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeArg-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"scribe argument — scribeArg-class","text":"get_action() Retrieve action get_aliases() Retrieve aliases get_default() Retrieve default value get_help() Retrieve help information character vector get_name(clean = TRUE) Retrieve names  clean TRUE removes -s text get_value() Retrieve resolved value help() Print formatted help information initialize(   aliases = \"\",   action = arg_actions(),   default = NULL,   convert = default_convert,   n = NA_integer_,   info = NA_character_,   options = list(),   stop = c(\"none\", \"hard\", \"soft\"),   execute = invisible ) Initialize scribeArg object See fields parameter information. is_resolved() Check object resolved","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeArg-class.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"scribe argument — scribeArg-class","text":"Several available options action=\"list\" choices explicit set values argument must .  value parsed one , error occur. action=\"flag\" TRUE included appends --aliases invert resultsExample: argument new_arg(\"--test\", options = list(= TRUE)), passing command arguments --test set TRUE ---test explicitly set FALSE.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/scribe/reference/scribeArg-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scribe argument — scribeArg-class","text":"","code":"# new_arg() is recommended over direct use of scribeArg$new()  # arguments with `--` indicators new_arg(\"--verbose\", action = \"flag\") #> Argument [--verbose --no-verbose] : FALSE new_arg(c(\"-f\", \"--force\"), action = \"flag\") #> Argument [-f --force --no-force] : FALSE new_arg(\"--values\", action = \"list\") #> Argument [--values] : <null>  # positional new_arg(\"verbose\", action = \"flag\") #> Argument [verbose no-verbose] : FALSE new_arg(\"value\", action = \"list\", n = 1) #> Argument [value] : <null>  # special `...` action which absorbs left-over arguments new_arg(\"values\", action = \"dots\", info = \"list of values\") #> Argument [values] : <null> new_arg(\"...\", info = \"list of values\") # defaults when alias is \"...\" #> Argument [...] : <null>"},{"path":"https://jmbarbone.github.io/scribe/reference/scribeCommandArgs-class.html","id":null,"dir":"Reference","previous_headings":"","what":"scribe command arguments — scribeCommandArgs-class","title":"scribe command arguments — scribeCommandArgs-class","text":"Reference class object managing command line arguments.","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeCommandArgs-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scribe command arguments — scribeCommandArgs-class","text":"class manages command line argument inputs passed via Rscript utility.  Take simple script adds two numbers, save executable file called add.R,   called terminal, can pass arguments return function.   testing, can simulate command line arguments passing input field. default, grab values base::commandArgs(), use Rscript utility require extra steps. methods designed return .self, scribeCommandArgs class. exceptions $get_*() methods, return corresponding values, $parse() returns named list parsed input values.","code":"#!/usr/bin/env Rscript  library(scribe) ca <- command_args() ca$add_argument(\"--value1\", default = 0L) ca$add_argument(\"--value2\", default = 0L) args <- ca$parse() writeLines(args$value1 + args$value2) add.R --value1 10 --value2 1 11"},{"path":"https://jmbarbone.github.io/scribe/reference/scribeCommandArgs-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"scribe command arguments — scribeCommandArgs-class","text":"input [character] character vector command line arguments. See also command_args() values [list] named list values.  Empty initialization populated argument resolving. args [list] List scribeArgs description [character] Additional help information included [character] Default scribeArgs include examples [character] Examples print help comments [character] Comments printed resolved [logical] logical value indicated $resolve() method successfully executed. working [character] copy input.  Note: used track parsing progress meant accessed directly. stop [character] Determines parsing","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/scribeCommandArgs-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"scribe command arguments — scribeCommandArgs-class","text":"add_argument(   ...,   action = arg_actions(),   options = NULL,   convert = default_convert,   default = NULL,   n = NA_integer_,   info = NULL,   execute = invisible ) Add scribeArg args  ... Either aliases scribeArg.  latter,         arguments ignored.  Note first value         (..1) used. action, options, convet, default,         n, info See new_arg() add_description(..., sep = \"\") Add value description  ... Information paste description sep character separate ... add_example(x, comment = \"\", prefix = \"$ \") Add value examples  x code example character comment optional comment append prefix optional prefix example get_args(included = TRUE) Retrieve args  included TRUE also returns included default         scribeArgs defined $initialize() get_description() Retrieve description get_examples() Retrieve examples get_input() Retrieve input get_values() Retrieve values help() Print help information initialize(input = \"\", include = c(\"help\", \"version\", NA_character_)) Initialize scribeCommandArgs object.  wrapper     command_args() recommended rather     calling method directly.  input character vector command line arguments         parse include character vector denoting default         scribeArgs include args parse() Return named list parsed values scribeArg args resolve() Resolve values scribeArg args.  method called prior $parse() set_description(..., sep = \"\") Set value description  ... Information paste description sep character separate ... set_example(x = character(), comment = \"\", prefix = \"$ \") Set value examples  x code example character comment optional comment append prefix optional prefix example set_input(value) Set input.  Note: called, resolved (re)set      FALSE values need parsed .  value Value set set_values(= TRUE, value) Set values  Index value working set value value set version() Print scribe-package version","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/scribe/reference/scribeCommandArgs-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scribe command arguments — scribeCommandArgs-class","text":"","code":"# command_args() is recommended over direct use of scribeCommandArgs$new()  ca <- command_args(c(1, 2, 3, \"--verbose\")) ca$add_argument(\"--verbose\", action = \"flag\") ca$add_argument(\"...\", \"values\", info = \"values to add\", default = 0.0) args <- ca$parse()  if (args$verbose) {   message(\"Adding \", length(args$values), \" values\") } #> Adding 3 values  sum(args$values) #> [1] 6  # $parse() returns a named list, which means scribeCommandArgs can function # as a wrapper for calling R functions inside Rscript  ca <- command_args(c(\"mean\", \"--size\", 20, \"--absolute\")) ca$add_argument(\"fun\", action = \"list\") ca$add_argument(\"--size\", default = 5L) ca$add_argument(\"--absolute\", action = \"flag\") args <- ca$parse()  my_function <- function(fun, size, absolute = FALSE) {   fun <- match.fun(fun)   x <- sample(size, size, replace = TRUE)   res <- fun(x)   if (absolute) res <- abs(res)   res }  do.call(my_function, args) #> [1] 9.7"},{"path":"https://jmbarbone.github.io/scribe/reference/value_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple conversions — value_convert","title":"Simple conversions — value_convert","text":"Convert character data types","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/value_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple conversions — value_convert","text":"","code":"value_convert(x, to = default_convert)"},{"path":"https://jmbarbone.github.io/scribe/reference/value_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple conversions — value_convert","text":"x vector character values convert x (see details )","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/value_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple conversions — value_convert","text":"parsed value x","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/value_convert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple conversions — value_convert","text":"can one several values.  Firstly default default calls several additional functions attempt resolve transformation character vector different type.  recommended users enter specifications instead.  Secondly, function (single argument) can passed applied directly x. Third, prototype value can passed.  might risky special types.  , values mode(), storage.mode(), attributes(), class() captured reassigned x.  special check implemented factors safely convert.  Lastly, NULL nothing simply return x.","code":""},{"path":"https://jmbarbone.github.io/scribe/reference/value_convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple conversions — value_convert","text":"","code":"str(value_convert(\"2023-03-05\", as.Date)) #>  Date[1:1], format: \"2023-03-05\" value_convert(\"a\", factor(letters)) #> [1] a #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z"},{"path":"https://jmbarbone.github.io/scribe/news/index.html","id":"scribe-020","dir":"Changelog","previous_headings":"","what":"scribe 0.2.0","title":"scribe 0.2.0","text":"CRAN release: 2023-05-22","code":""},{"path":"https://jmbarbone.github.io/scribe/news/index.html","id":"fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"scribe 0.2.0","text":"--help longer fails scribeArg length(info) > 1 #59","code":""},{"path":"https://jmbarbone.github.io/scribe/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scribe 0.2.0","text":"execute new field scribeArg function can called #63 stop new field scribeArg controls arguments parsed allows early stops #60 options() scribe now listed ?scribe documentation set .onAttach() #57 scribeArgs can now given separate scribeArg default #54 positional arguments now can default values #52 scribeArgs action = 'flag' now accept default = TRUE #55","code":""},{"path":"https://jmbarbone.github.io/scribe/news/index.html","id":"scribe-010","dir":"Changelog","previous_headings":"","what":"scribe 0.1.0","title":"scribe 0.1.0","text":"CRAN release: 2023-03-13 Added NEWS.md file track changes package.","code":""}]
